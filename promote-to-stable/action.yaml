name: Promote snap
description: Promotes a given set of revisions to a specified channel
author: Snapcrafters
branding:
  icon: trending-up
  color: orange

inputs:
  channel:
    description: "The channel to promote the snap to"
    default: "latest/stable"
    required: false
  github-token:
    description: "A token with permissions to write issues on the repository"
    required: true
  snapcraft-project-root:
    description: "The root of the snapcraft project, where the `snapcraft` command would usually be executed from."
    required: false
  snapcraft-channel:
    description: "The channel to install snapcraft from"
    default: latest/stable
    required: false
  store-token:
    description: "A token with permissions to upload to the specified channel"
    required: true

runs:
  using: composite
  steps:
    - name: Checkout the source
      uses: actions/checkout@v4

    - name: Parse slash command
      id: command
      uses: xt0rted/slash-command-action@v2
      with:
        repo-token: ${{ inputs.github-token }}
        command: promote
        reaction: "true"
        reaction-type: "eyes"
        allow-edits: "false"
        permission-level: write

    - name: Ensure promoter is in Snapcrafters
      uses: actions/github-script@v7
      with:
        script: |
          const result = await github.rest.teams.getMembershipForUserInOrg({
            org: 'snapcrafters',
            team_slug: 'reviewers',
            username: context.actor
          })

          console.log(creator, result)
          core.setFailed('commenting user is not permitted to promote this snap.')

    - name: Get valid revisions for promotion
      id: valid-revisions
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          const issue = await github.rest.issues.get({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          })

          return issue.data.body.match(/\/promote ([0-9,]+)/)[1].split(",").join(" ")

    - name: Install snapcraft
      shell: bash
      run: |
        sudo snap install --classic --channel "${{inputs.snapcraft-channel}}" snapcraft

    - name: Find and parse snapcraft.yaml
      id: snapcraft-yaml
      uses: snapcrafters/ci/parse-snapcraft-yaml@main
      with:
        snapcraft-project-root: ${{ inputs.snapcraft-project-root }}

    - name: Promote snap
      id: promote
      env:
        channel: ${{ inputs.channel }}
        SNAPCRAFT_STORE_CREDENTIALS: ${{ inputs.store-token }}
        snap_name: ${{ steps.snapcraft-yaml.outputs.snap-name }}
        valid_revisions: ${{ steps.valid-revisions.outputs.result }}
      shell: bash
      run: |
        echo "The command was '${{ steps.command.outputs.command-name }}' with arguments '${{ steps.command.outputs.command-arguments }}'"

        # shellcheck disable=SC1083,SC2206
        arguments=(${{ steps.command.outputs.command-arguments }})
        revision=${arguments[0]}
        requested_channel=${arguments[1]}
        done=${arguments[2]}

        re='^[0-9]+([,][0-9]+)*$'
        if [[ ! "$revision" =~ $re ]]; then
          echo "revision must be a number or a comma separated list of numbers, not '$revision'!"
          exit 1
        fi

        if [[ "$requested_channel" != "$channel" ]]; then
          echo "I can only promote to ${channel}, not '$requested_channel'!"
          exit 1
        fi

        if [[ -n "$done" && "$done" != "done"  ]]; then
          echo "The third argument should be 'done' or empty"
          exit 1
        fi

        # Iterate over each specified revision and release
        revs=$(echo "$revision" | tr "," "\n")
        released_revs=()
        rejected_revs=()

        for r in $revs; do
          if [[ "$valid_revisions" =~ (^|[[:space:]])"$r"($|[[:space:]]) ]]; then
            snapcraft release "$snap_name" "$r" "$requested_channel"
            released_revs+=("$r")
          else
            rejected_revs+=("$r")
            echo "Not promoting revision '$r' because the revision is not related to this test."
          fi
        done

        # Get a comma separated list of released revisions
        printf -v joined '%s,' "${released_revs[@]}"
        printf -v joined_rejected '%s,' "${rejected_revs[@]}"

        echo "revisions=${joined%,}" >> "$GITHUB_OUTPUT"
        echo "rejected=${joined_rejected%,}" >> "$GITHUB_OUTPUT"
        echo "channel=$requested_channel" >> "$GITHUB_OUTPUT"
        echo "done=$done" >> "$GITHUB_OUTPUT"

    - name: Comment on call for testing issue
      uses: actions/github-script@v7
      with:
        script: |
          let message = ""
          if ("${{ steps.promote.outputs.revisions }}".length > 0) {
            message += 'The following revisions were released to the `${{ steps.promote.outputs.channel }}` channel: `${{ steps.promote.outputs.revisions }}`. '
          }

          if ("${{ steps.promote.outputs.rejected }}".length > 0) {
            message += 'The following revisions were not released, because they are unrelated to this call for testing: `${{ steps.promote.outputs.rejected }}`. '
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          })

    - name: Close call for testing issue
      if: ${{ steps.promote.outputs.done }} == "done"
      uses: actions/github-script@v7
      with:
        script: |
          if ("${{ steps.promote.outputs.done }}" === "done" && "${{ steps.promote.outputs.revisions }}".length > 0) {
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            })
          }
